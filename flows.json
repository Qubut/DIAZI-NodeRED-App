[
    {
        "id": "1a7f55c947897d20",
        "type": "tab",
        "label": "Activities processing",
        "disabled": false,
        "info": "This flow processes the acitivities\nextracted from the json Object and\nthe sends them through a POST req.\nto IFOX",
        "env": []
    },
    {
        "id": "5813698dd43a8415",
        "type": "subflow",
        "name": "Angular App",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 780,
                "y": 160,
                "wires": [
                    {
                        "id": "82ad7d75aed5f097",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f5bc973247a5d1ae",
        "type": "subflow",
        "name": "MQTT",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 1300,
                "y": 240,
                "wires": [
                    {
                        "id": "94b296b07db386a2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "afcc9e461e29261b",
        "type": "subflow",
        "name": "token podcasting",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "870e31d9fb8670a3",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "in": [],
        "out": []
    },
    {
        "id": "45657a9a6a99105a",
        "type": "subflow",
        "name": "Authorization and Resources fetching",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 980,
                "y": 160,
                "wires": [
                    {
                        "id": "4984421a904889ac",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "eee073b556a5c002",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "254bec667f96d88f",
        "type": "http in",
        "z": "5813698dd43a8415",
        "name": "authentication",
        "url": "/authentication",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 160,
        "wires": [
            [
                "f113ec7b0c20439f",
                "914609fdf5f39b4d"
            ]
        ]
    },
    {
        "id": "ce1682cdb5a27fe8",
        "type": "http in",
        "z": "5813698dd43a8415",
        "name": "data",
        "url": "/data",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 200,
        "wires": [
            [
                "4038b19243f2e6e8",
                "b6b8991c50788cbf"
            ]
        ]
    },
    {
        "id": "4038b19243f2e6e8",
        "type": "function",
        "z": "5813698dd43a8415",
        "name": "Add topic",
        "func": "msg.topic = 'data'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 200,
        "wires": [
            [
                "82ad7d75aed5f097"
            ]
        ]
    },
    {
        "id": "f113ec7b0c20439f",
        "type": "function",
        "z": "5813698dd43a8415",
        "name": "Add topic",
        "func": "msg.topic = 'authorization'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 120,
        "wires": [
            [
                "82ad7d75aed5f097"
            ]
        ]
    },
    {
        "id": "914609fdf5f39b4d",
        "type": "http response",
        "z": "5813698dd43a8415",
        "name": "response",
        "statusCode": "200",
        "headers": {},
        "x": 420,
        "y": 160,
        "wires": []
    },
    {
        "id": "b6b8991c50788cbf",
        "type": "http response",
        "z": "5813698dd43a8415",
        "name": "response",
        "statusCode": "200",
        "headers": {},
        "x": 420,
        "y": 240,
        "wires": []
    },
    {
        "id": "82ad7d75aed5f097",
        "type": "join",
        "z": "5813698dd43a8415",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 650,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "82697f3394676093",
        "type": "mqtt in",
        "z": "f5bc973247a5d1ae",
        "name": "",
        "topic": "/file/json",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "eee073b556a5c002",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 380,
        "y": 140,
        "wires": [
            [
                "b4ef33cf061ae806",
                "46bccd62d1e43c0e"
            ]
        ]
    },
    {
        "id": "94b296b07db386a2",
        "type": "function",
        "z": "f5bc973247a5d1ae",
        "name": "processing",
        "func": "\nconst payload = msg.payload\nconst BASEDATE = '2023-07-18T22:00:00.000Z';\n/**\n * Formats a date by adding a specified amount of time (in seconds) \n * to a base date and returns the result in the format 'YYYY-MM-DD HH:MM:SS.SSSSSS'.\n *\n * @param {string} baseDate - The base date in ISO format.\n * @param {number} time - The time in seconds to add to the base date.\n * @return {string} - Formatted date string.\n */\nfunction formatDate(time,baseDate=BASEDATE) {\n  \n    const date = new Date(baseDate);\n    const seconds = Math.floor(time);\n    const microseconds = Math.round((time - seconds) * 1e6);\n    date.setSeconds(seconds);\n    date.setMilliseconds(microseconds / 1000);\n\n    // Format the microseconds to ensure it always has 6 digits\n    const formattedMicroseconds = microseconds.toString().padStart(6, '0');\n    const isoString = date.toISOString().slice(0, -1);\n\n    // the desired format \"YYYY-MM-DD HH:MM:SS.SSSSSS\"\n    const formattedDate = `${isoString.slice(0, 10)} ${isoString.slice(11, 19)}.${formattedMicroseconds}`;\n\n    return formattedDate;\n}\n\n\n\nif (payload.hasOwnProperty('activities') &&\n    Array.isArray(payload.activities) &&\n    payload.activities.length > 0) {\n    const activities = payload.activities\n    msg.payload = activities\n    return msg\n}\nelse if (payload.hasOwnProperty('Resources') &&\n    payload.Resources.length > 0 &&\n    payload.Resources[0].hasOwnProperty('Activities') &&\n    Array.isArray(payload.Resources[0].Activities)) {\n    msg.payload = payload.Resources.flatMap((resource) => {\n\n        return resource.Activities.map((activity) => {\n            return {\n                start: formatDate(activity.StartTime),\n                end: formatDate(activity.EndTime),\n                externProductId: \"\",\n                externResourceIdPerson: resource.DisplayName,\n                externProcessId: (activity.State == 'Idle') ? 'Idle' : 'Busy',\n                reason: \"commend\"\n\n            }\n        })\n    })\n}\nelse {\n    throw new Error('invalid format')\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "bffa4a8a4180f09d",
        "type": "mqtt out",
        "z": "f5bc973247a5d1ae",
        "name": "",
        "topic": "/file/received",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "eee073b556a5c002",
        "x": 750,
        "y": 140,
        "wires": []
    },
    {
        "id": "b4ef33cf061ae806",
        "type": "function",
        "z": "f5bc973247a5d1ae",
        "name": "set payload",
        "func": "msg.payload = {received:true}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 140,
        "wires": [
            [
                "bffa4a8a4180f09d"
            ]
        ]
    },
    {
        "id": "04e33c2c734a44f4",
        "type": "subflow:afcc9e461e29261b",
        "z": "f5bc973247a5d1ae",
        "name": "token podcasting",
        "x": 300,
        "y": 340,
        "wires": []
    },
    {
        "id": "de28d995c3bbc7ba",
        "type": "join",
        "z": "f5bc973247a5d1ae",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 810,
        "y": 240,
        "wires": [
            [
                "4ab00291f3c41a5a"
            ]
        ]
    },
    {
        "id": "46bccd62d1e43c0e",
        "type": "function",
        "z": "f5bc973247a5d1ae",
        "name": "change topic",
        "func": "msg.topic=\"data\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 220,
        "wires": [
            [
                "de28d995c3bbc7ba"
            ]
        ]
    },
    {
        "id": "4ab00291f3c41a5a",
        "type": "function",
        "z": "f5bc973247a5d1ae",
        "name": "check resources",
        "func": "/**\n * Uses the provided data to manage resources.\n * - Compares a list of resources against an API resource list.\n * - For any resource not found in the API list, it sends a POST request to add that resource.\n * - Combines the list of found resources with those successfully created and updates the payload.\n * \n * @global {Function} axios - Axios library instance for making HTTP requests.\n * @param {Object} msg - The message object containing payload with resources data.\n * @returns {Object} - Updated message object with combined data of found and successfully created resources.\n */\nconst axios = global.get('axios');\n\nconst resources = msg.payload[\"data\"][\"Resources\"];\nconst apiResources = msg.payload[\"resources\"];\nconst found = resources.filter(resource => apiResources.some(apiResource => apiResource.name === resource.DisplayName));\nconst notFound = resources.filter(resource => !apiResources.some(apiResource => apiResource.name === resource.DisplayName));\n\nlet successfullyCreated = [];\n\n/**\n * Sends a POST request to create a given resource.\n * If the creation is successful, the resource is added to the successfullyCreated list.\n * \n * @async\n * @param {Object} resource - The resource object to be created.\n */\nconst createResource = async (resource) => {\n    const endpoint = 'https://haw.ifox-systems.de/api/v1/intern/Resources/addresource';\n    const r = { ...apiResources[0], name: resource[\"DisplayName\"] };\n    delete r[\"id\"];\n\n    try {\n        const response = await axios.post(endpoint, { r });\n        if (response.status === 200 || response.status === 201) {\n            successfullyCreated.push(resource);\n        }\n    } catch (error) {\n        console.error(`Failed to create resource \"${resource.DisplayName}\":`, error.message);\n    }\n}\n\nconst requests = notFound.map(resource => createResource(resource));\n\nPromise.all(requests).then(() => {\n    msg.payload = { ...msg.payload[\"data\"], Resources: found.concat(successfullyCreated)}\n});\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 240,
        "wires": [
            [
                "94b296b07db386a2"
            ]
        ]
    },
    {
        "id": "871635d98626f185",
        "type": "subflow:45657a9a6a99105a",
        "z": "f5bc973247a5d1ae",
        "name": "",
        "x": 550,
        "y": 280,
        "wires": [
            [
                "de28d995c3bbc7ba"
            ]
        ]
    },
    {
        "id": "fd349df7f73d6c64",
        "type": "mqtt out",
        "z": "afcc9e461e29261b",
        "name": "podcast token",
        "topic": "/authentication/token",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "eee073b556a5c002",
        "x": 560,
        "y": 300,
        "wires": []
    },
    {
        "id": "edddc2ebea7280ea",
        "type": "http request",
        "z": "afcc9e461e29261b",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://haw.ifox-systems.de/api/v1/general/Auth/login",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 350,
        "y": 300,
        "wires": [
            [
                "fd349df7f73d6c64"
            ]
        ]
    },
    {
        "id": "924c5dd613199772",
        "type": "inject",
        "z": "afcc9e461e29261b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "/authentication/token",
        "payload": "{  \"userName\": \"test\",   \"password\": \"password\"}",
        "payloadType": "json",
        "x": 190,
        "y": 300,
        "wires": [
            [
                "edddc2ebea7280ea"
            ]
        ]
    },
    {
        "id": "ccd157a130533489",
        "type": "mqtt in",
        "z": "45657a9a6a99105a",
        "name": "token",
        "topic": "/authentication/token",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "eee073b556a5c002",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 120,
        "wires": [
            [
                "66095d4e8972f7c8",
                "3e1591393da51211"
            ]
        ]
    },
    {
        "id": "2e1b6ab97340458a",
        "type": "mqtt out",
        "z": "45657a9a6a99105a",
        "name": "",
        "topic": "/token/received",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "eee073b556a5c002",
        "x": 660,
        "y": 80,
        "wires": []
    },
    {
        "id": "66095d4e8972f7c8",
        "type": "function",
        "z": "45657a9a6a99105a",
        "name": "set payload",
        "func": "msg.payload = {received:true}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 80,
        "wires": [
            [
                "2e1b6ab97340458a"
            ]
        ]
    },
    {
        "id": "3e1591393da51211",
        "type": "function",
        "z": "45657a9a6a99105a",
        "name": "add authorization header",
        "func": "msg.headers = {\n\n    'Authorization': \"Bearer \" + msg.payload[\"token\"],\n    'Content-Type': 'application/json'\n\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 140,
        "wires": [
            [
                "5acced3fdccc2378"
            ]
        ]
    },
    {
        "id": "5acced3fdccc2378",
        "type": "http request",
        "z": "45657a9a6a99105a",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://haw.ifox-systems.de/api/v1/intern/Resources",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 650,
        "y": 140,
        "wires": [
            [
                "4984421a904889ac"
            ]
        ]
    },
    {
        "id": "4984421a904889ac",
        "type": "function",
        "z": "45657a9a6a99105a",
        "name": "change topic",
        "func": "msg.topic=\"resources\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "388d0dacf92d87b5",
        "type": "http request",
        "z": "1a7f55c947897d20",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://haw.ifox-systems.de/api/v1/extern/Activities/add",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1090,
        "y": 340,
        "wires": [
            [
                "58ae7552dd7cd450",
                "bd7acd6ac9f5bb0f"
            ]
        ]
    },
    {
        "id": "9badb57c66753082",
        "type": "split",
        "z": "1a7f55c947897d20",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 750,
        "y": 320,
        "wires": [
            [
                "4cc2ba34a2d7f9e0"
            ]
        ]
    },
    {
        "id": "bd7acd6ac9f5bb0f",
        "type": "debug",
        "z": "1a7f55c947897d20",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 1225,
        "y": 420,
        "wires": [],
        "l": false
    },
    {
        "id": "e452e9fa71839f68",
        "type": "catch",
        "z": "1a7f55c947897d20",
        "name": "",
        "scope": [
            "94b296b07db386a2"
        ],
        "uncaught": false,
        "x": 570,
        "y": 240,
        "wires": [
            [
                "b1bbbf5d8e979d23"
            ]
        ]
    },
    {
        "id": "b1bbbf5d8e979d23",
        "type": "function",
        "z": "1a7f55c947897d20",
        "name": "reject",
        "func": "msg.payload = {accepted:false}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 240,
        "wires": [
            [
                "e81704b7c27c4dd0"
            ]
        ]
    },
    {
        "id": "b76921599904f5c6",
        "type": "complete",
        "z": "1a7f55c947897d20",
        "name": "",
        "scope": [
            "9badb57c66753082"
        ],
        "uncaught": false,
        "x": 590,
        "y": 180,
        "wires": [
            [
                "a3e5711bc826d3e2"
            ]
        ]
    },
    {
        "id": "e81704b7c27c4dd0",
        "type": "mqtt out",
        "z": "1a7f55c947897d20",
        "name": "",
        "topic": "/file/accepted",
        "qos": "2",
        "retain": "true",
        "respTopic": "",
        "contentType": "application/json",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "eee073b556a5c002",
        "x": 950,
        "y": 220,
        "wires": []
    },
    {
        "id": "a3e5711bc826d3e2",
        "type": "function",
        "z": "1a7f55c947897d20",
        "name": "accept",
        "func": "msg.payload = {accepted:true}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 180,
        "wires": [
            [
                "e81704b7c27c4dd0"
            ]
        ]
    },
    {
        "id": "58ae7552dd7cd450",
        "type": "mqtt out",
        "z": "1a7f55c947897d20",
        "name": "",
        "topic": "/api/status",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "eee073b556a5c002",
        "x": 1270,
        "y": 340,
        "wires": []
    },
    {
        "id": "ab9b75f5543399dd",
        "type": "function",
        "z": "1a7f55c947897d20",
        "name": "add authorization header",
        "func": "msg.headers = {\n\n    'Authorization': \"Bearer \" + msg.payload[\"/authentication/token\"],\n    'Content-Type': 'application/json'\n\n}\nmsg.payload = msg.payload[\"/file/json\"]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 400,
        "wires": [
            [
                "9badb57c66753082",
                "8cb5b0b9c2eb5ed8"
            ]
        ]
    },
    {
        "id": "2f50741f1ee5f07a",
        "type": "subflow:5813698dd43a8415",
        "z": "1a7f55c947897d20",
        "name": "Angular App",
        "x": 350,
        "y": 380,
        "wires": [
            [
                "ab9b75f5543399dd"
            ]
        ]
    },
    {
        "id": "b4ecd4c3e7167b8b",
        "type": "subflow:f5bc973247a5d1ae",
        "z": "1a7f55c947897d20",
        "name": "MQTT",
        "x": 350,
        "y": 320,
        "wires": [
            [
                "9badb57c66753082"
            ]
        ]
    },
    {
        "id": "8cb5b0b9c2eb5ed8",
        "type": "debug",
        "z": "1a7f55c947897d20",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "counter",
        "x": 815,
        "y": 420,
        "wires": [],
        "l": false
    },
    {
        "id": "4cc2ba34a2d7f9e0",
        "type": "delay",
        "z": "1a7f55c947897d20",
        "name": "",
        "pauseType": "random",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "0",
        "randomLast": "2",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 920,
        "y": 340,
        "wires": [
            [
                "388d0dacf92d87b5"
            ]
        ]
    }
]